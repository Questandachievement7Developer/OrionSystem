#!/bin/bash
#299999ggg
#Hello everyone gutten morgen xd
set +xv #mute toomany arguments
#http://bhfsteve.blogspot.com/2014/07/embedding-python-in-bash-scripts.html


export zygotePID=$$

executableupdate(){

git pull
chmod +x $0
}

killzygote(){
busybox pkill -P $zygotePID
}

bot_engine_main(){
PYTHON_ARG="$1" python - <<END
import os
from chatterbot import ChatBot
chatbot = ChatBot("TakoAI")
input = os.environ['PYTHON_ARG']
response = chatbot.get_response(input)
print(response)
END
}

#Colouring Functions
red(){
printf '\e[38;5;210m ' > /dev/tty
}

yellow(){
printf '\e[38;5;221m ' > /dev/tty
}
green(){
printf '\e[38;5;042m ' > /dev/tty
}
blue(){
printf '\e[38;5;039m ' > /dev/tty
}

#color
bot_command_spitter(){
${output} &>> ${currdir}/logs/botsystemPrompt
}

killall_bgsvc(){
processlist=$(cat ${currdir}/memory/bgproc)
for a in ${processlist}; do
kill -9 ${a}
done
kill -9 ${memmanagerid}
rm -rf ${currdir}/memory/bgproc
}

suspend_bgsvc(){
processlist=$(cat ${currdir}/memory/bgproc)
yellow
echo All process has been suspended
for a in ${processlist}; do
kill -19 ${a}
done
}

resume_bgsvc(){
processlist=$(cat ${currdir}/memory/bgproc)
green
echo All process has been resumed
for a in ${processlist}; do
kill -18 ${a}
done
} 

memoryUsage(){
Usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
Usage=$( printf "%.0f" $(echo ${Usage}))
echo "$Usage"
}



memorymanagement(){
export MMBADGE="[MemoryManagement]"
yellow
echo "$MMBADGE Memory Management Started up" > /dev/tty
while true ; do
memoryUsage
echo "Memory Usage $Usage"
if [ $Usage -gt "80" ] ;then
red
echo "$MMBADGE Memory Deprivation Detected"
echo "$MMBADGE To prevent further memory corruption The execution will stop until Enough memory"
suspend_bgsvc
while [ "$Usage" -gt "80" ] ; do
memoryUsage
sleep 2
done
resume_bgsvc
fi
sleep 0.2
done
}

bot_learnseq_engine(){
for a in ${currdir}/NN/* ; do
cat ${a}
echo ${a}
export PYTHON_ARG=${a}
PYTHON_ARG="${a}" python - << END
import os
from chatterbot.trainers import ListTrainer
from chatterbot import ChatBot

chatbot = ChatBot("TakoAI")
LearnFILE = os.environ['PYTHON_ARG']
conversation = (LearnFILE, 'r')
print(conversation)
trainer = ListTrainer(chatbot)
trainer.train(conversation)
END
done
}


#Porting for q7OS
export currdir=$(pwd)
export HOME=${currdir}/FetchedData
mkdir FetchedData
cd ${currdir}
export LD_PRELOAD=

#bb

folderinit(){
mkdir ${currdir}/extra_modules
mkdir ${currdir}/memory
mkdir ${currdir}/logs
mkdir ${currdir}/sensedata
if [ ! -f InteractionReinforcement ]; then
mkdir ${currdir}/NN
echo a >> ${currdir}/NN/InteractionReinforcement
fi
}


logorender(){
red
echo "  ____      __       ___   ____";
echo " / __ \____/ /____  / _ | /  _/";
green
echo "/ /_/ / __/ __/ _ \/ __ |_/ /  ";
blue
echo "\____/\__/\__/\___/_/ |_/___/  ";
echo "                               ";

}

#############################BOOT SERVICES CALL #########################################

svcStart(){
echo Starting customized Daemon and Drivers
daemonLoad &> ${currdir}/logs/inputbinlogs
echo $! >> ${currdir}/memory/bgproc
echo Starting dataInput Translator
anyInputtoBinary &> ${currdir}/logs/inputbinlogs.log &
echo $! >> ${currdir}/memory/bgproc
memorymanagement &> ${currdir}/logs/mmmanage.log &
memmanagerid=$(echo $!) 
}

##############################CUSTOM DAEMONS OR DRIVER LOADER#############################

daemonLoad(){
for i in ${currdir}/extra_modules/* ; do
echo $i
bash ${i} &
echo $! >> ${currdir}/memory/bgproc
done
}



###############################MainSENSORYBINARYDECODER###############################

anyInputtoBinary(){
for a in ${currdir}/senseData/* ; do
xxd -ps ${a} > ${currdir}/NN/${a}_raw
done
}

###############################BASIC AI TEXT INPUT OUTPUT#############################3


export USERUI="User > "
export BOTUI="octo > "

bot_fetch_web_engine(){
if [ ! -f ${currdir}/memory/webspiderlock ]; then
sh $0 "${inputtxt}" 
fi
}


botmainChat(){
if [ -z $output ] ;then
output=aaaa
fi
while true ; do
#inputtxt=$(dialog --title "Chat" --inputbox "Please Enter Your Message" 8 40 2>&1 >/dev/tty)
green
echo -n "${USERUI}"
read inputtxt
exit_input
#dialog --infobox Processing 5 50
if [ ! -z "${inputtxt}" ] ; then 
botChatReply &> /dev/null &
echo $! >> ${currdir}/memory/bgproc
fi
#dialog --title "OctopusAI" --msgbox "${output}" 5 50
done
}

botChatReply(){
if [ ! -z "${inputtxt}" ] ;then 
echo "${inputtxt}" >> ${currdir}/NN/InteractionReinforcement
output=$(bot_engine_main "${inputtxt}") 2>&1 >> ${currdir}/logs/NNlog.log &> /dev/null
bot_learnseq_engine &>> ${currdir}/logs/NNlog.log &
echo $! >> ${currdir}/memory/bgproc
bot_fetch_web_engine &>> ${currdir}/logs/webcrawler.log &
echo $! >> ${currdir}/memory/bgproccc
if [ ! -z ${output} ] && [ ${output} != 'r' ] ;then
echo "${output}" >> ${currdir}/NN/InteractionReinforcement
echo ${blank} > /dev/tty
bot_command_spitter
blue > /dev/tty
echo "${BOTUI} ${output}" > /dev/tty
green > /dev/tty
echo -n "${USERUI} " > /dev/tty
fi
fi
}


#################################BASIC IO AI END############################
dependencies(){
set -e
if [ $(whoami) != "root" ]; then

echo " It seems you are installing this AI for the first time "
echo " Therefore please run it with root "
exit
fi

if [ ! -z $(which pacman) ] ;then
pacman -S lynx httrack busybox dialog python python-setuptools coreutils --noconfirm --needed
elif [ ! -z $(which apt-get) ] ;then
apt-get -y install lynx python3-dev httrack busybox dialog python3 python3-setuptools
fi
#creating files that able to make easy_install works on debian
echo 'python3 -m easy_install $1' > /bin/easy_install
echo 'python3 -m pip install $1' > /bin/pip
chmod +x /bin/pip /bin/easy_install
python3 -m easy_install pip
#pip install chatterbot_corpus
#pip install conda
python3 -m pip install cytoolz
#python -m conda install -y python-dateutil
#python -m conda install -y spacy
#python -m conda install -y pint
##python -m conda install -y pymongo
#python -m conda install -y pyyaml
#python -m conda install -y pytz
#python -m conda install -y mathpase
#python -m conda install -y sqlalchemy
python3 -m pip install pyyaml==5.1
python3 -m pip install sumy
python3 -m pip install chatterbot 
#python3 -m pip install chatterbot_corpus
python3 -c "import nltk; nltk.download('punkt')" 
set +e
}

dependenciesprep(){
if [ ! -f $(pwd)/installed ]; then
clear
echo Folder Initialization
git reset --hard
clear
dependencies
echo Folder Initialization
git reset --hard
echo "a" > $(pwd)/installed
exit
else
dependencies &> ${currdir}/logs/dependenciesinstupdater.log &
fi
}

exit_input(){
if [ "${inputtxt}" == 'exit' ] ;then
killall_bgsvc
killzygote
exit
fi
}

#forMemoryModuleLoader

load_mem(){
file=$1
export filelist="${filelist} ${file}" > /dev/null 2>&1
export memstore_${file}="$(cat ${file})" > /dev/null 2>&1
rm -f ${file}.mem
}

download_mem(){
file=$1
destoffload=$2
if [ ! -z "$destoffload" ] && [ ! -z "$memstore_${file}" ] ; then
echo "$memstore_${file}" > "${destoffload}"
fi

}

discard_mem(){
file=$1
export memstore_${file}= > /dev/null 2>&1
}

discard_all_mem(){
for a in ${filelist}; do
export memstore_${a}=
done
export filelist=
}

load_mem_recursive(){
filelist=$(find "${dir}")
for i in ${filelist}; do
load_mem "$i"
done
}




#################################MAIN INIT AI LOGIC##############################

#MAIN
#start Main Module
folderinit
dependenciesprep
executableupdate
echo $! >> ${currdir}/memory/bgproc
clear
green
echo Welcome to OctopusAI created by questandachievement7Developers
logorender
svcStart
if [ -z $1 ] ;then
botmainChat
fi


#############################MAIN PROGRAM ENDED ############################################################



